<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.renly.dynamicSQL.EmployeeMapperDynamicSQL">
	<!-- 
	 if:判断
	 choose (when, otherwise):分支选择；带了break的swtich-case
		如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个
	 trim 字符串截取(where(封装查询条件), set(封装修改条件))
	 foreach 遍历集合
	 -->
	 
	 <!-- 查询员工，要求，携带了哪个字段查询条件就带上这个字段的值 -->
	 <select id="getEmpsByConditionIf" resultType="com.renly.bean.Employee">
	 	select * from mybatis_employee
	 	<!-- where -->
	 	<where>
		 	<!-- test：判断表达式（OGNL）
		 	OGNL参照PPT或者官方文档。
		 	  	 c:if  test
		 	从参数中取值进行判断
		 	
		 	遇见特殊符号应该去写转义字符：
		 	&&：
		 	-->
		 	<if test="id!=null">
		 		id=#{id}
		 	</if>
		 	<if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
		 		and last_name like #{lastName}
		 	</if>
		 	<if test="email!=null and email.trim()!=&quot;&quot;">
		 		and email=#{email}
		 	</if> 
		 	<!-- ognl会进行字符串与数字的转换判断  "0"==0 -->
		 	<if test="gender==0 or gender==1">
		 	 	and gender=#{gender}
		 	</if>
	 	</where>
	 </select>	
	
	
	 <!-- <update id="updateEmp">
	 	Set标签的使用
	 	update mybatis_employee 
		<set>
			<if test="lastName!=null">
				last_name=#{lastName},
			</if>
			<if test="email!=null">
				email=#{email},
			</if>
			<if test="gender!=null">
				gender=#{gender}
			</if>
		</set>
		where id=#{id} 
	 </update>
	 -->
	
	
	<!-- 		
		Trim：更新拼串
	-->
	<update id="updateEmp">
		update mybatis_employee 
		<trim prefix="set" suffixOverrides=",">
			<if test="lastName!=null">
				last_name=#{lastName},
			</if>
			<if test="email!=null">
				email=#{email},
			</if>
			<if test="gender!=null">
				gender=#{gender}
			</if>
		</trim>
		where id=#{id}  
	 </update>
	
	
	 <select id="getEmpsByConditionForeach" resultType="com.renly.bean.Employee">
	 	select * from mybatis_employee
	 	<!--
	 		collection：指定要遍历的集合：
	 			list类型的参数会特殊处理封装在map中，map的key就叫list
	 		item：将当前遍历出的元素赋值给指定的变量
	 		separator:每个元素之间的分隔符
	 		open：遍历出所有结果拼接一个开始的字符
	 		close:遍历出所有结果拼接一个结束的字符
	 		index:索引。遍历list的时候是index就是索引，item就是当前值
	 				      遍历map的时候index表示的就是map的key，item就是map的值
	 		
	 		#{变量名}就能取出变量的值也就是当前遍历出的元素
	 	  -->
	 	<foreach collection="ids" item="item_id" separator=","
	 		open="where id in(" close=")">
	 		#{item_id}
	 	</foreach>
	 </select>
	 
	 <select id="getEmpsTestInnerParameter" resultType="com.renly.bean.Employee">
	 	<bind name="_lastName" value="'%'+lastName+'%'"/>
	 		<if test="_parameter!=null">
	  			select * from mybatis_employee where last_name = #{lastName}
	  		</if>
	 </select>
	 
	 
	 <!-- 批量保存 -->
	 <!--MySQL下批量保存：可以foreach遍历   mysql支持values(),(),()语法-->
	<!-- <insert id="addEmps">
	 	insert into mybatis_employee(
	 		last_name,email,gender,d_id
	 	) 
		values
		<foreach collection="emps" item="emp" separator=",">
			(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
		</foreach>
	 </insert> -->
	 
	 <insert id="addEmps">
	 	
		 <foreach collection="emps" item="emp" separator=";">
			insert into  <include refid="insertColumn"></include>
			values(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
		</foreach>
	 </insert>
	 
	 
	 
	 	  <sql id="insertColumn">
	  			mybatis_employee(last_name,email,gender,d_id)
	  	  </sql>
	
</mapper>